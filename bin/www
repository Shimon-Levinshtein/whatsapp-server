#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-whatsapp-test:server');
var http = require('http');
const { startIoConnecting } = require('../socket/whatsapp');
const jwt = require('jsonwebtoken');

// const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3050');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// const io = new Server(server, {
//   cors: {
//     origin: "http://localhost:3006",
//     methods: ["GET", "POST"]
//   }
// });

// io.on('connection', (socket) => {
//   socket.on("open_channel_whatsapp", (data) => {
//     // socket.join(data);
//     console.log(`User with ID: ${socket.id} joined room: ${data}`);
//   });
//   console.log('a user connected: ' + socket.id);
//   socket.on('disconnect', () => {
//     console.log('user disconnected - id: ' + socket.id);
//   });
// });

const io = require('../socket')
  .init(server, {
    cors: {
      origin: "http://localhost:3006",
      methods: ["GET", "POST"]
    }
  });

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (token) {
    try {
      verifyToken = jwt.verify(token, process.env.ENCRYPTED_TOKEN);
      next();
    } catch (error) {
      console.log(error.message);
    }
  }
});

io.on('connection', socket => {
  console.log('a user connected: ' + socket.id);
  startIoConnecting(socket);
  socket.on('disconnect', () => {
    console.log('user disconnected - id: ' + socket.id);
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// module.exports = server;